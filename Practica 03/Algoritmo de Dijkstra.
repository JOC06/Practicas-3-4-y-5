import networkx as nx
import matplotlib.pyplot as plt

def dijkstra(graph, start_node):
    distances = {node: float('inf') for node in graph.nodes()}
    distances[start_node] = 0
    visited = set()

    while visited != set(graph.nodes()):
        current_node = min(
            (node for node in graph.nodes() if node not in visited),
            key=lambda node: distances[node]
        )
        visited.add(current_node)
        for neighbor in graph.neighbors(current_node):
            if distances[current_node] + graph[current_node][neighbor]['weight'] < distances[neighbor]:
                distances[neighbor] = distances[current_node] + graph[current_node][neighbor]['weight']

    return distances

def visualize_graph(graph, path):
    pos = nx.spring_layout(graph)
    nx.draw(graph, pos, with_labels=True)
    labels = {edge: graph[edge[0]][edge[1]]['weight'] for edge in graph.edges}
    nx.draw_networkx_edge_labels(graph, pos, edge_labels=labels)
    nx.draw_networkx_edges(graph, pos, edgelist=path, edge_color='r', width=2)
    plt.show()

if __name__ == "__main__":
    G = nx.Graph()
    G.add_edge('A', 'B', weight=4)
    G.add_edge('A', 'C', weight=2)
    G.add_edge('B', 'C', weight=5)
    G.add_edge('B', 'D', weight=10)
    G.add_edge('C', 'D', weight=3)
    G.add_edge('C', 'E', weight=8)
    G.add_edge('D', 'E', weight=7)

    start_node = 'A'
    distances = dijkstra(G, start_node)

    print("Distancias más cortas desde el nodo de inicio:")
    for node, distance in distances.items():
        print(f"{node}: {distance}")

    end_node = 'E'
    shortest_path = nx.shortest_path(G, source=start_node, target=end_node, weight='weight')
    print(f"Ruta más corta desde {start_node} a {end_node}: {shortest_path}")

    visualize_graph(G, [(shortest_path[i], shortest_path[i + 1]) for i in range(len(shortest_path) - 1)])
